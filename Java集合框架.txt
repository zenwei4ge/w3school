集合框架体系
            接口  1.Collection,List//线性存储，动态长度
                 2.Map//键值对存储，动态长度
            具体类    1.LinkedList,ArrayList
                     2.HashMap
            算法    Collections
集合接口
        Collection 接口
        List 接口
        Set
        SortedSet
        Map
        Map.Entry
        SortedMap
        Enumeration
Set和List区别
              1.Set 接口实例存储的是无序的，不重复的数据。List 接口实例存储的是有序的，可以重复的元素。
              2.Set检索效率低下，删除和插入效率高，插入和删除不会引起元素位置改变 <实现类有HashSet,TreeSet>
              3. List和数组类似，可以动态增长，根据实际存储的数据的长度自动增长List的长度。查找元素效率高，插入删除效率低，因为会引起其他元素位置改变                 <实现类有ArrayList,LinkedList,Vector> 。
集合实现类
            LinkedList
            ArrayList
            HashSet
            LinkedHashSet
            TreeSet
            HashMap
            TreeMap 
            WeakHashMap
            LinkedHashMap
            IdentityHashMap 
遍历   
            遍历ArrayList:      List<String> list=new ArrayList<String>();list.add("")...
                                //第一种遍历方法使用foreach遍历List
                               for (String str : list) {            //也可以改写for(int i=0;i<list.size();i++)这种形式
                                  System.out.println(str);
                               }

                               //第二种遍历，把链表变为数组相关的内容进行遍历
                               String[] strArray=new String[list.size()];
                               list.toArray(strArray);
                               for(int i=0;i<strArray.length;i++) //这里也可以改写为  foreach(String str:strArray)这种形式
                               {
                                  System.out.println(strArray[i]);
                               }

                              //第三种遍历 使用迭代器进行相关遍历

                               Iterator<String> ite=list.iterator();
                               while(ite.hasNext())//判断下一个元素之后有值
                               {
                                   System.out.println(ite.next());
                               }
              遍历Map             
                              Map<String, String> map = new HashMap<String, String>();
                              map.put("1", "value1");
                              map.put("2", "value2");
                              map.put("3", "value3");
                                    //第一种：普遍使用，二次取值
                              System.out.println("通过Map.keySet遍历key和value：");
                              for (String key : map.keySet()) {
                               System.out.println("key= "+ key + " and value= " + map.get(key));
                              }

                              //第二种
                              System.out.println("通过Map.entrySet使用iterator遍历key和value：");
                              Iterator<Map.Entry<String, String>> it = map.entrySet().iterator();
                              while (it.hasNext()) {
                               Map.Entry<String, String> entry = it.next();
                               System.out.println("key= " + entry.getKey() + " and value= " + entry.getValue());
                              }

                              //第三种：推荐，尤其是容量大时
                              System.out.println("通过Map.entrySet遍历key和value");
                              for (Map.Entry<String, String> entry : map.entrySet()) {
                               System.out.println("key= " + entry.getKey() + " and value= " + entry.getValue());
                              }

                              //第四种
                              System.out.println("通过Map.values()遍历所有的value，但不能遍历key");
                              for (String v : map.values()) {
                               System.out.println("value= " + v);
                              }
集合框架的类和接口均在java.util包中
任何对象加入集合类后，自动转变为Object类型，所以在取出的时候，需要进行强制类型转换
