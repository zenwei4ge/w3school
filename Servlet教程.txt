Servlet生命周期
                Servlet 通过调用 init () 方法进行初始化。
                Servlet 调用 service() 方法来处理客户端的请求。
                Servlet 通过调用 destroy() 方法终止（结束）。
                init() 方法:
                              在第一次创建 Servlet 时被调用，在后续每次用户请求时不再调用。
                              init 方法的定义:       
                                               public void init() throws ServletException {
                                                  // 初始化代码...
                                                }
                service() 方法:
                                检查 HTTP 请求类型（GET、POST、PUT、DELETE 等），并在适当的时候调用 doGet、doPost、doPut，doDelete 等方法
                                Servlet 容器（即 Web 服务器）调用 service() 方法来处理来自客户端（浏览器）的请求，并把格式化的响应写回给客户端
                                不用对 service() 方法做任何动作，您只需要根据来自客户端的请求类型来重写 doGet() 或 doPost() 即可
                                该方法的特征：
                                                public void service(ServletRequest request, 
                                                                    ServletResponse response) 
                                                      throws ServletException, IOException{
                                                }
               doGet() 方法:
                                    来自于一个 URL 的正常请求，或者来自于一个未指定 METHOD 的 HTML 表单
                                    public void doGet(HttpServletRequest request,
                                                      HttpServletResponse response)
                                        throws ServletException, IOException {
                                        // Servlet 代码
                                    }
               doPost() 方法:
                                    来自于一个特别指定了 METHOD 为 POST 的 HTML 表单
                                    public void doPost(HttpServletRequest request,
                                                       HttpServletResponse response)
                                        throws ServletException, IOException {
                                        // Servlet 代码
                                    }
                destroy() 方法:
                                    可以让您的 Servlet 关闭数据库连接、停止后台线程、把 Cookie 列表或点击计数器写入到磁盘，并执行其他类似的清理                                      活动
                                    public void destroy() {
                                      // 终止化代码...
                                    }
                示例
                                     // 导入必需的 java 库
                                      import java.io.*;
                                      import javax.servlet.*;
                                      import javax.servlet.http.*;

                                      // 扩展 HttpServlet 类
                                      public class HelloWorld extends HttpServlet {

                                        private String message;

                                        public void init() throws ServletException
                                        {
                                            // 执行必需的初始化
                                            message = "Hello World";
                                        }

                                        public void doGet(HttpServletRequest request,
                                                          HttpServletResponse response)
                                                  throws ServletException, IOException
                                        {
                                            // 设置响应内容类型
                                            response.setContentType("text/html");

                                            // 实际的逻辑是在这里
                                            PrintWriter out = response.getWriter();
                                            out.println("<h1>" + message + "</h1>");
                                        }
                           

                                        public void destroy()
                                        {
                                            // 什么也不做
                                        }
                                      }
Servlet 部署
                把 HelloWorld.class 复制到 <Tomcat-installation-directory>/webapps/ROOT/WEB-INF/classes 中，并在位于 <Tomcat-installation-                   directory>/webapps/ROOT/WEB-INF/ 的 web.xml 文件中创建以下条目：
                        <web-app>      
                            <servlet>
                                <servlet-name>HelloWorld</servlet-name>
                                <servlet-class>HelloWorld</servlet-class>
                            </servlet>

                            <servlet-mapping>
                                <servlet-name>HelloWorld</servlet-name>
                                <url-pattern>/HelloWorld</url-pattern>
                            </servlet-mapping>
                        </web-app> 
     
