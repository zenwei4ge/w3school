多态实现方式：   重写，接口，抽象
虚方法：       重写的方法能在运行时调用，不管编译的时候源代码中引用变量是什么数据类型。
抽象：     抽象方法没有定义，方法名后面直接跟一个分号，而不是花括号。
          抽象类中不一定包含抽象方法
           抽象类不能被实例化
           抽象类的子类必须给出抽象类中的抽象方法的具体实现，除非该子类也是抽象类
封装：       实现步骤：
                      修改属性的可见性来限制对属性的访问（一般限制为private）
                      对每个值属性创建一对赋值去取值方法
接口：
           一个抽象类型，是抽象方法的集合。以interface声明
           个实现接口的类，必须实现接口内所描述的所有方法，否则就必须声明为抽象类
           接口特性：        接口中每一个方法也是隐式抽象的,接口中的方法会被隐式的指定为 public abstract
                            接口中可以含有变量，但是接口中的变量会被隐式的指定为 public static final 变量
                            接口中的方法是不能在接口中实现的，只能由实现接口的类来实现
           接口声明：   访问限制符 interface 接口名 externds 类名{}
           接口实现：   ...implements 接口名称[, 其他接口名称, 其他接口名称..., ...] ...
           接口的多继承：   public interface Hockey extends Sports, Event
           标记接口：    没有任何方法和属性的接口.它仅仅表明它的类属于一个特定的类型,供其他代码来测试允许做一些事情
包         包的作用：
                         1.把功能相似或相关的类和接口组织在一个包里，方便查找和使用
                         2.不同包中类名可以相同，可以避免命名冲突
                         3.限定访问权限
           一些Java中的包 
                         java.lang 打包基础的类
                         java.io 包含输入输出功能的函数
           语法格式
                    package pkg1[.pkg2[.pkg3...]]
           创建包
                  源文件包含了该包提供的类接口，枚举，或注释类型的时候，必须将该包的声明放在源文件开头
           import关键字
                       为了能够使用某一包的成员
                       语法import package1[.package2…].(classname|*);
            package的目录结构
                             包名会成为类名的一部分
                             包名必须与相应的字节码所在的目录结构相吻合
                             源文件放在一个目录中，这个目录要对应类所在包的名字。
                             编译的时候，编译器为包中定义的每个类、接口等类型各创建一个不同的.class输出文件
                             编译之后的 .class 文件应该和 .java 源文件一样，它们放置的目录应该跟包的名字对应起来
                             编译器和 java 虚拟机通过将 package 名字加到 class path 后来构造 .class 文件的路径
