Token的作用
Token一般用在两个地方——防止表单重复提交、anti csrf攻击（跨站点请求伪造）。
两者在原理上都是通过session token来实现的。当客户端请求页面时，服务器会生成一个随机数Token，并且将Token放置到session当中，然后将Token发给客户端（一般通过构造hidden表单）。下次客户端提交请求时，Token会随着表单一起提交到服务器端。
然后，如果应用于“anti csrf攻击”，则服务器端会对Token值进行验证，判断是否和session中的Token值相等，若相等，则可以证明请求有效，不是伪造的。

不过，如果应用于“防止表单重复提交”，服务器端第一次验证相同过后，会将涩session中的Token值更新下，若用户重复提交，第二次的验证判断将失败，因为用户提交的表单中的Token没变，但服务器端session中Token已经改变了。

//生成token
        UUID token=UUID.randomUUID();
        System.out.println("token的值"+token);
        //放入session中
        request.getSession().setAttribute("token", token.toString());
        //放入request作用域中传到前台
        request.setAttribute("token", token);
 //获取session中的token
        Object token1=request.getSession().getAttribute("token");
        //获取前台穿过来的token
        String token=request.getParameter("token");
        
        
//移除session 防止重复提交 
            request.getSession().removeAttribute("token");
            
            
mybatis
        创建一个UserMapper.java文件作为DAO接口
                public interface UserMapper {

                void save(User user);
                boolean update(User user);
                boolean delete(int id);
                User findById(int id);
                List<User> findAll();
                }
         在dao包下创建一个UserMapper.xml文件作为上一步创建的DAO接口的实现。
                <?xml version="1.0" encoding="UTF-8"?>
                <!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
                "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
                <!-- 
                        namespace：必须与对应的接口全类名一致
                        id:必须与对应接口的某个对应的方法名一致

                 -->
                <mapper namespace="com.tgb.mapper.UserMapper">

                        <insert id="save" parameterType="User">
                                insert into t_user(user_name,user_age) values(#{userName},#{age})
                        </insert>

                        <update id="update" parameterType="User">
                                update t_user set user_name=#{userName},user_age=#{age} where user_id=#{id}
                        </update>
                 <!-- mybsits_config中配置的alias类别名,也可直接配置resultType为类路径 -->  
           mybatis的配置文件
                <?xml version="1.0" encoding="UTF-8"?>
                        <!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN" 
                        "http://mybatis.org/dtd/mybatis-3-config.dtd">
                        <configuration>

                                <!-- 实体类,简称 -设置别名 -->
                                <typeAliases>
                                        <typeAlias alias="User" type="com.tgb.model.User" />
                                </typeAliases>
                                <!-- 实体接口映射资源 -->
                                <!--
                                        说明：如果xxMapper.xml配置文件放在和xxMapper.java统一目录下，mappers也可以省略，因为                                                  org.mybatis.spring.mapper.MapperFactoryBean默认会去查找与xxMapper.java相同目录和名称的xxMapper.xml
                                -->
                                <mappers>
                                        <mapper resource="com/tgb/mapper/userMapper.xml" />
                                </mappers>

                        </configuration>  

