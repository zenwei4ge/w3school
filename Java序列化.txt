Java 序列化
             一个对象可以被表示为一个字节序列，该字节序列包括该对象的数据、有关对象的类型的信息和存储在对象中数据的类型
             将序列化对象写入文件之后，可以从文件中读取出来，并且对它进行反序列化,可以用来在内存中新建对象.
             类 ObjectInputStream 和 ObjectOutputStream 是高层次的数据流，它们包含序列化和反序列化对象的方法。
             序列化：
                        1. ObjectOutputStream 类包含很多写方法来写各种数据类型
                             public final void writeObject(Object x) throws IOException
                        2.ObjectInputStream 类包含如下反序列化一个对象的方法
                             public final Object readObject() throws IOException, ClassNotFoundException
                         
             一个类的对象要想序列化成功，必须满足两个条件：
                                该类必须实现 java.io.Serializable 对象。
                                该类的所有属性必须是可序列化的。如果有一个属性不是可序列化的，则该属性必须注明是短暂的。
序列化对象
            FileOutputStream fileOut = new FileOutputStream("/tmp/employee.ser");
            ObjectOutputStream outout=new ObjectOutputStream(fileOut);
            out.writeObject(e);
            out.close();
            fileOut.close();
反序列化对象
            try{
              Employee e=null;
              FileInputStream fileInput=new fileInputStream("/tmp/employee.ser");
              ObjectInputStream input=new  ObjectInputStream(fileInput);
              e=(Employee)input.readObject();
              input.close();
              fileInput.close();
            }
            catch(IOException i)
            {
               i.printStackTrace();
               return;
            }catch(ClassNotFoundException c)
            {
               System.out.println("Employee class not found");
               c.printStackTrace();
               return;
            }
关于 java 中的序列化与反序列化
        关于序列化，常又称为持久化，将其写入磁盘中
        任一一个实体类必须要去实现 Serializable 接口，方便以后将该类持久化，或者将其用于转为字节数组，用于网络传输
        对于一个实体类，不想将所有的属性都进行序列化，有专门的关键字 transient
        
        
