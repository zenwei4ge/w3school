核心机制
              管理Bean
                        程序主要是通过Spring容器来访问容器中的Bean，ApplicationContext是Spring容器最常用的接口，该接口有两个实现类
                                  ClassPathXmlApplicationContext: 从类加载路径下搜索配置文件，并根据配置文件来创建Spring容器。
                                  FileSystemXmlApplicationContext: 从文件系统的相对路径或绝对路径下去搜索配置文件，并根据配置文件来创建Spring容                                        器。
                        示例
                              ApplicationContext ctx = new ClassPathXmlApplicationContext("beans.xml");
                              Person p = ctx.getBean("person", Person.class);
                              p.say();
              Eclipse使用Spring
                                   在Eclipse等IDE工具中，用户可以自建User Library，然后把Spring的Jar包都放入其中
                                   可以将Jar包直接放在项目的/WEB-INF/lib目录下
              依赖注入
                          Spring框架的核心功能：
                                                Spring容器作为超级大工厂，负责创建、管理所有的Java对象，这些Java对象被称为Bean。
                                                Spring使用一种被称为"依赖注入"的方式来管理Bean之间的依赖关系。不仅可以为Bean注入普通的属性值，还                                                     以注入其他Bean的引用。
                          理解依赖注入
                                        调用者无需主动获取被依赖对象，调用者只要被动接受Spring容器为调用者的成员变量赋值
                                        Spring容器负责将被依赖对象赋值给调用者的成员变量——相当于为调用者注入它依赖的实例
                          两种注入方式
                                        设值注入：指IoC容器通过成员变量的setter方法来注入被依赖对象
                                        构造注入：利用构造器来设置依赖关系的方式，被称为构造注入
             Spring容器中的Bean
                          容器中Bean的作用域
                                              singleton: 单例模式，在整个Spring IoC容器中，singleton作用域的Bean将只生成一个实例。
                                              prototype: 每次通过容器的getBean()方法获取prototype作用域的Bean时，都将产生一个新的Bean实例。
                                              request: 对于一次HTTP请求，request作用域的Bean将只生成一个实例，这意味着，在同一次HTTP请求内，程                                                    序每次请求该Bean，得到的总是同一个实例。只有在Web应用中使用Spring时，该作用域才真正有效。
                                              global session: 每个全局的HTTP Session对应一个Bean实例。在典型的情况下，仅在使用portlet context                                                    的时候有效，同样只在Web应用中有效。
                                              如果不指定Bean的作用域，Spring默认使用singleton作用域。
                        使用自动装配注入合作者Bean
                                                  由Spring容器检查XML配置文件内容，根据某种规则，为调用者Bean注入被依赖的Bean
                                                  自动装配可通过<beans/>元素的default-autowire属性指定，该属性对配置文件中所有的Bean起作用                                                         可通过对<bean/>元素的autowire属性指定，该属性只对该Bean起作用
                                                  autowire可以接受如下值：
                                                        no: 不使用自动装配。Bean依赖必须通过ref元素定义。
                                                        byName: 根据setter方法名进行自动装配。
                                                        byType: 根据setter方法的形参类型来自动装配。
                                                        constructor: 用于自动匹配构造器的参数。
                                                        autodetect: Spring容器根据Bean内部结构，自行决定使用constructor或byType策略
                                                 通过设置可以将Bean排除在自动装配之外
                                                          <bean id="" autowire-candidate="false"/>
                                                          <beans default-autowire-candidates="*abc"/><!-- 支持模式字符串，所有以abc结尾的                                                             Bean都被排除在自动装配之外-->
                         创建Bean的3种方式    
                                            使用构造器创建Bean实例
                                            使用静态工厂方法创建Bean
                                            调用实例工厂方法创建Bean
                          协调作用域不同步的Bean
                                                当singleton作用域的Bean依赖于prototype作用域的Bean时，会产生不同步的现象
                                                解决不同步
                                                          放弃依赖注入
                                                          使用lookup方法注入
                                                          
  两种后处理器      
                            Bean后处理器
                            容器后处理器
  Spring的"零配置"支持
                                搜索Bean类
                                                提供如下几个Annotation来标注Spring Bean：
                                                      @Component: 标注一个普通的Spring Bean类
                                                      @Controller: 标注一个控制器组件类
                                                      @Service: 标注一个业务逻辑组件类
                                                      @Repository: 标注一个DAO组件类
                                                  在Spring配置文件中做如下配置，指定自动扫描的包：
                                                      <context:component-scan base-package="edu.shu.spring.domain"/>
                              使用@Resource配置依赖
                              使用@PostConstruct和@PreDestroy定制生命周期行为
                              @Autowired注解来指定自动装配，可以修饰setter方法、普通方法、实例变量和构造器等
                              Qualifier注解，通过使用@Qualifier，允许根据Bean的id来执行自动装配。
  Spring的AOP
                    通过AOP来处理一些具有横切性质的系统级服务，如事务管理、安全检查、缓存、对象池管理等
                    AOP的基本概念
                                        切面（Aspect）: 切面用于组织多个Advice，Advice放在切面中定义。
                                        连接点（Joinpoint）: 程序执行过程中明确的点，如方法的调用，或者异常的抛出。在Spring AOP中，连接点总是方                                           法的调用。
                                        增强处理（Advice）: AOP框架在特定的切入点执行的增强处理。处理有"around"、"before"和"after"等类型
                                        切入点（Pointcut）: 可以插入增强处理的连接点。简而言之，当某个连接点满足指定要求时，该连接点将被添加增强                                           处理，该连接点也就变成了切入点。
                     Spring的AOP支持
                                              为了在应用中使用@AspectJ支持，Spring需要添加三个库：
                                                          aspectjweaver.jar
                                                          aspectjrt.jar
                                                          aopalliance.jar
                                               在Spring配置文件中做如下配置：
                                                    <!--启动@AspectJ支持-->
                                                  <aop:aspectj-autoproxy/>

                                                  <!--指定自动搜索Bean组件、自动搜索切面类-->
                                                  <context:component-scan base-package="edu.shu.sprint.service">
                                                      <context:include-filter type="annotation"                                                                                                  expression="org.aspectj.lang.annotation.Aspect"/>
                                                  </context:component-scan>
                                      
                          
