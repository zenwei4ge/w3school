1.创建型模式：在创建对象的时候隐藏了创建逻辑，避免直接用new实例化
             包括：工厂模式，抽象工厂模式，单例模式，建造者模式，原型模式（Prototype）
2.结构型模式：关注类和对象的组合
             包括：适配器模式，桥接模式，过滤器模式，组合模式（Composite Pattern），装饰器模式，外观模式（Facade Pattern），享元模式（Flyweight Pattern），代理模式（Proxy Pattern）
3.行为型模式：关注对象之间的通信
             包括：责任链模式（Chain of Responsibility Pattern）,命令模式（Command Pattern）,解释器模式（Interpreter Pattern）,迭代器模式（Iterator Pattern）,中介者模式（Mediator Pattern）,备忘录模式（Memento Pattern）,观察者模式（Observer Pattern）,状态模式（State Pattern）,空对象模式（Null Object Pattern）,策略模式（Strategy Pattern）,模板模式（Template Pattern）,访问者模式（Visitor Pattern）
 4.J2EE 模式：这些设计模式特别关注表示层
              包括：MVC 模式（MVC Pattern），业务代表模式（Business Delegate Pattern），组合实体模式（Composite Entity Pattern），数据访问对象模式（Data Access Object Pattern），前端控制器模式（Front Controller Pattern），拦截过滤器模式（Intercepting Filter Pattern），服务定位器模式（Service Locator Pattern），传输对象模式（Transfer Object Pattern）
 设计模式的六大原则
              1、开闭原则（Open Close Principle）：开闭原则的意思是：对扩展开放，对修改关闭。
              2、里氏代换原则（Liskov Substitution Principle）：里氏代换原则是面向对象设计的基本原则之一。 里氏代换原则中说，任何基类可以出现的地方，子类一定可以出现。
             3、依赖倒转原则（Dependence Inversion Principle）：这个原则是开闭原则的基础，具体内容：针对接口编程，依赖于抽象而不依赖于具体。
             4、接口隔离原则（Interface Segregation Principle）：这个原则的意思是：使用多个隔离的接口，比使用单个接口要好。它还有另外一个意思是：降低类之间的耦合度。
            5、迪米特法则，又称最少知道原则（Demeter Principle）：最少知道原则是指：一个实体应当尽量少地与其他实体之间发生相互作用，使得系统功能模块相对独立。
            6、合成复用原则（Composite Reuse Principle）：合成复用原则是指：尽量使用合成/聚合的方式，而不是使用继承。

工厂模式
抽象工厂模式
单例模式：这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。
         关键代码：public class SingleObject {

                 //创建 SingleObject 的一个对象
                 private static SingleObject instance = new SingleObject();

                 //让构造函数为 private，这样该类就不会被实例化
                 private SingleObject(){}

                 //获取唯一可用的对象
                 public static SingleObject getInstance(){
                    return instance;
                 }
                 }
建造者模式：使用多个简单的对象一步一步构建成一个复杂的对象。
           实现：创建一个表示食物条目（比如汉堡和冷饮）的 Item 接口和实现 Item 接口的实体类，以及一个表示食物包装的 Packing 接口和实现 Packing 接口的实体类，然后我们创建一个 Meal 类，带有 Item 的 ArrayList 和一个通过结合 Item 来创建不同类型的 Meal 对象的 MealBuilder。BuilderPatternDemo，我们的演示类使用 MealBuilder 来创建一个 Meal。
 原型模式：用于创建重复的对象，同时又能保证性能。
          实现： 
                 public abstract class Shape implements Cloneable//实现clone接口
                  public Object clone() {//重写clone方法
                   Object clone = null;
                   try {
                      clone = super.clone();
                   } catch (CloneNotSupportedException e) {
                      e.printStackTrace();
                   }
                   return clone;
                }
                 Shape cachedShape = shapeMap.get(shapeId);
                 return (Shape) cachedShape.clone();//调用clone方法
                 
 适配器模式：作为两个不兼容的接口之间的桥梁。
          实现： public MediaAdapter(String audioType){
          if(audioType.equalsIgnoreCase("vlc") ){
             advancedMusicPlayer = new VlcPlayer();            
          } else if (audioType.equalsIgnoreCase("mp4")){
             advancedMusicPlayer = new Mp4Player();
          }    
桥接模式：用于把抽象化与实现化解耦，使得二者可以独立变化。
         实现：public interface DrawAPI//创建桥接实现接口
              public class RedCircle implements DrawAPI//创建桥接实现类
              public class GreenCircle implements DrawAPI //创建桥接实现类
              public class Circle extends Shape
              public Circle(int x, int y, int radius, DrawAPI drawAPI) //实现桥接的类的构造方法
              Shape redCircle = new Circle(100,100, 10, new RedCircle());
              Shape greenCircle = new Circle(100,100, 10, new GreenCircle());//使用shape画出不同的圆
过滤器模式：允许开发人员使用不同的标准来过滤一组对象，通过逻辑运算以解耦的方式把它们连接起来。
           实现：public interface Criteria {
                 public List<Person> meetCriteria(List<Person> persons);
              }//为标准创建接口
                 public class CriteriaMale implements Criteria {

                     @Override
                     public List<Person> meetCriteria(List<Person> persons) {
                        List<Person> malePersons = new ArrayList<Person>(); 
                        for (Person person : persons) {
                           if(person.getGender().equalsIgnoreCase("MALE")){
                              malePersons.add(person);
                           }
                        }
                        return malePersons;
                     }
                  }//创建实现了标准接口的实体类
                  Criteria male = new CriteriaMale();//实例化标准
                  printPersons(male.meetCriteria(persons));//使用标准进行过滤
 组合模式：又叫部分整体模式，是用于把一组相似的对象当作一个单一的对象。组合模式依据树形结构来组合对象，用来表示部分以及整体层次。
          实现：
                 public class Employee {
                   private String name;
                   private String dept;
                   private int salary;
                   private List<Employee> subordinates;

                   //构造函数
                   public Employee(String name,String dept, int sal) {
                      this.name = name;
                      this.dept = dept;
                      this.salary = sal;
                      subordinates = new ArrayList<Employee>();
                   }

                   public void add(Employee e) {
                      subordinates.add(e);
                   }

                   public void remove(Employee e) {
                      subordinates.remove(e);
                   }
                }
  装饰器模式：允许向一个现有的对象添加新的功能，同时又不改变其结构。
             1.创建实现了 Shape 接口的抽象装饰类。 
                  public abstract class ShapeDecorator implements Shape {
                      protected Shape decoratedShape;

                      public ShapeDecorator(Shape decoratedShape){
                         this.decoratedShape = decoratedShape;
                      }

                      public void draw(){
                         decoratedShape.draw();
                      }    
                   }
                2.创建扩展了 ShapeDecorator 类的实体装饰类。
                    public class RedShapeDecorator extends ShapeDecorator {

                    public RedShapeDecorator(Shape decoratedShape) {
                       super(decoratedShape);        
                    }

                    @Override
                    public void draw() {
                       decoratedShape.draw();           
                       setRedBorder(decoratedShape);
                    }

                    private void setRedBorder(Shape decoratedShape){
                       System.out.println("Border Color: Red");
                    }
                 }
外观模式：外观模式（Facade Pattern）隐藏系统的复杂性，并向客户端提供了一个客户端可以访问系统的接口。
         实现：public class ShapeMaker {
               private Shape circle;
               private Shape rectangle;
               private Shape square;

               public ShapeMaker() {
                  circle = new Circle();
                  rectangle = new Rectangle();
                  square = new Square();
               }

               public void drawCircle(){
                  circle.draw();
               }
               public void drawRectangle(){
                  rectangle.draw();
               }
               public void drawSquare(){
                  square.draw();
               }
            }
享元模式：主要用于减少创建对象的数量，以减少内存占用和提高性能。享元模式尝试重用现有的同类对象，如果未找到匹配的对象，则创建新对象。
        实现：我们将创建一个 Shape 接口和实现了 Shape 接口的实体类 Circle。下一步是定义工厂类 ShapeFactory。
ShapeFactory 有一个 Circle 的 HashMap，其中键名为 Circle 对象的颜色。无论何时接收到请求，都会创建一个特定颜色的圆。ShapeFactory 检查它的 HashMap 中的 circle 对象，如果找到 Circle 对象，则返回该对象，否则将创建一个存储在 hashmap 中以备后续使用的新对象，并把该对象返回到客户端。
FlyWeightPatternDemo，我们的演示类使用 ShapeFactory 来获取 Shape 对象。它将向 ShapeFactory 传递信息（red / green / blue/ black / white），以便获取它所需对象的颜色。
               import java.util.HashMap;

                public class ShapeFactory {
                   private static final HashMap<String, Shape> circleMap = new HashMap<>();

                   public static Shape getCircle(String color) {
                      Circle circle = (Circle)circleMap.get(color);

                      if(circle == null) {
                         circle = new Circle(color);
                         circleMap.put(color, circle);
                         System.out.println("Creating circle of color : " + color);
                      }
                      return circle;
                   }
                }
代理模式：一个类代表另一个类的功能，在代理模式中，我们创建具有现有对象的对象，以便向外界提供功能接口。
          实现：public class ProxyImage implements Image{

                private RealImage realImage;
                private String fileName;

                public ProxyImage(String fileName){
                   this.fileName = fileName;
                }

                @Override
                public void display() {
                   if(realImage == null){
                      realImage = new RealImage(fileName);
                   }
                   realImage.display();
                }
             }
责任链模式：为请求创建了一个接收者对象的链。每个接收者都包含对另一个接收者的引用。如果一个对象不能处理该请求，那么它会把相同的请求传给下一个接收者，依此类推。
           实现：
               1.创建抽象类
                     public abstract class AbstractLogger {
                      public static int INFO = 1;
                      public static int DEBUG = 2;
                      public static int ERROR = 3;

                      protected int level;

                      //责任链中的下一个元素
                      protected AbstractLogger nextLogger;

                      public void setNextLogger(AbstractLogger nextLogger){
                         this.nextLogger = nextLogger;
                      }

                      public void logMessage(int level, String message){
                         if(this.level <= level){
                            write(message);
                         }
                         if(nextLogger !=null){
                            nextLogger.logMessage(level, message);
                         }
                      }

                      abstract protected void write(String message);

                   }
             2.创建抽象类的实体类
             3.创建链
               private static AbstractLogger getChainOfLoggers(){

                  AbstractLogger errorLogger = new ErrorLogger(AbstractLogger.ERROR);
                  AbstractLogger fileLogger = new FileLogger(AbstractLogger.DEBUG);
                  AbstractLogger consoleLogger = new ConsoleLogger(AbstractLogger.INFO);

                  errorLogger.setNextLogger(fileLogger);
                  fileLogger.setNextLogger(consoleLogger);

                  return errorLogger;    
               }
             4.实现
                AbstractLogger loggerChain = getChainOfLoggers();//链的第一个

               loggerChain.logMessage(AbstractLogger.INFO, 
                  "This is an information.");

               loggerChain.logMessage(AbstractLogger.DEBUG, 
                  "This is an debug level information.");

               loggerChain.logMessage(AbstractLogger.ERROR, 
                  "This is an error information."
 命令模式
 策略模式：在策略模式（Strategy Pattern）中，一个类的行为或其算法可以在运行时更改。这种类型的设计模式属于行为型模式。
           在策略模式中，我们创建表示各种策略的对象和一个行为随着策略对象改变而改变的 context 对象。策略对象改变 context 对象的执行算法。
          实现：public class Context {
                  private Strategy strategy;

                  public Context(Strategy strategy){
                     this.strategy = strategy;
                  }

                  public int executeStrategy(int num1, int num2){
                     return strategy.doOperation(num1, num2);
                  }
               }
 MVC模式：Model（模型） - 模型代表一个存取数据的对象或 JAVA POJO。它也可以带有逻辑，在数据变化时更新控制器。
               View（视图） - 视图代表模型包含的数据的可视化。
               Controller（控制器） - 控制器作用于模型和视图上。它控制数据流向模型对象，并在数据变化时更新视图。它使视图与模型分离开。
  业务代表模式：客户端（Client） - 表示层代码可以是 JSP、servlet 或 UI java 代码。
               业务代表（Business Delegate） - 一个为客户端实体提供的入口类，它提供了对业务服务方法的访问。
               查询服务（LookUp Service） - 查找服务对象负责获取相关的业务实现，并提供业务对象对业务代表对象的访问。
               业务服务（Business Service） - 业务服务接口。实现了该业务服务的实体类，提供了实际的业务实现逻辑。










