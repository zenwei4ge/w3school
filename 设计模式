1.创建型模式：在创建对象的时候隐藏了创建逻辑，避免直接用new实例化
             包括：工厂模式，抽象工厂模式，单例模式，建造者模式，原型模式（Prototype）
2.结构型模式：关注类和对象的组合
             包括：适配器模式，桥接模式，过滤器模式，组合模式（Composite Pattern），装饰器模式，外观模式（Facade Pattern），享元模式（Flyweight Pattern），代理模式（Proxy Pattern）
3.行为型模式：关注对象之间的通信
             包括：责任链模式（Chain of Responsibility Pattern）,命令模式（Command Pattern）,解释器模式（Interpreter Pattern）,迭代器模式（Iterator Pattern）,中介者模式（Mediator Pattern）,备忘录模式（Memento Pattern）,观察者模式（Observer Pattern）,状态模式（State Pattern）,空对象模式（Null Object Pattern）,策略模式（Strategy Pattern）,模板模式（Template Pattern）,访问者模式（Visitor Pattern）
 4.J2EE 模式：这些设计模式特别关注表示层
              包括：MVC 模式（MVC Pattern），业务代表模式（Business Delegate Pattern），组合实体模式（Composite Entity Pattern），数据访问对象模式（Data Access Object Pattern），前端控制器模式（Front Controller Pattern），拦截过滤器模式（Intercepting Filter Pattern），服务定位器模式（Service Locator Pattern），传输对象模式（Transfer Object Pattern）
 设计模式的六大原则
              1、开闭原则（Open Close Principle）：开闭原则的意思是：对扩展开放，对修改关闭。
              2、里氏代换原则（Liskov Substitution Principle）：里氏代换原则是面向对象设计的基本原则之一。 里氏代换原则中说，任何基类可以出现的地方，子类一定可以出现。
             3、依赖倒转原则（Dependence Inversion Principle）：这个原则是开闭原则的基础，具体内容：针对接口编程，依赖于抽象而不依赖于具体。
             4、接口隔离原则（Interface Segregation Principle）：这个原则的意思是：使用多个隔离的接口，比使用单个接口要好。它还有另外一个意思是：降低类之间的耦合度。
            5、迪米特法则，又称最少知道原则（Demeter Principle）：最少知道原则是指：一个实体应当尽量少地与其他实体之间发生相互作用，使得系统功能模块相对独立。
            6、合成复用原则（Composite Reuse Principle）：合成复用原则是指：尽量使用合成/聚合的方式，而不是使用继承。

工厂模式
抽象工厂模式
单例模式：这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。
         关键代码：public class SingleObject {

                 //创建 SingleObject 的一个对象
                 private static SingleObject instance = new SingleObject();

                 //让构造函数为 private，这样该类就不会被实例化
                 private SingleObject(){}

                 //获取唯一可用的对象
                 public static SingleObject getInstance(){
                    return instance;
                 }
                 }
建造者模式：使用多个简单的对象一步一步构建成一个复杂的对象。
            
                 
                 
                 
             
